"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var startServer = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(program) {
    var directory, compilerConfig, devConfig, compiler, HTMLPath, htmlCompilerConfig;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            directory = program.directory;

            // Start bootstrap process.

            _context.next = 3;
            return bootstrap(program);

          case 3:
            _context.next = 5;
            return webpackConfig(program, directory, `develop`, program.port);

          case 5:
            compilerConfig = _context.sent;
            devConfig = compilerConfig.resolve();
            compiler = webpack(devConfig);
            HTMLPath = glob.sync(`${directory}/src/html.*`)[0];
            // Check if we can't find an html component in root of site.

            if (!HTMLPath) {
              HTMLPath = `${directory}/.cache/default-html.js`;
            }

            // We use the program port not the webpack-dev-server port as if you import
            // files in your html.js they won't be available through the
            // webpack-dev-server.  By using the program port, requesting these
            // imported files might accidentally work as the imported files will be
            // available in /public. TODO test how expensive it'd be to do an actual
            // static compile of the html.js on startup to avoid this discprenecy
            // between dev and prod.
            _context.next = 12;
            return webpackConfig(program, directory, `develop-html`, program.port);

          case 12:
            htmlCompilerConfig = _context.sent;


            webpackRequire(htmlCompilerConfig.resolve(), HTMLPath, function (error, factory) {
              if (error) {
                console.log(`Failed to require ${directory}/html.js`);
                error.forEach(function (e) {
                  console.log(e);
                });
                process.exit();
              }
              var HTML = factory();
              debug(`Configuring develop server`);

              var app = express();
              app.use(require(`webpack-hot-middleware`)(compiler, {
                log: console.log,
                path: `/__webpack_hmr`,
                heartbeat: 10 * 1000
              }));
              app.use(`/___graphql`, graphqlHTTP({
                schema: store.getState().schema,
                graphiql: true
              }));
              var htmlStr = void 0;
              // Render an HTML page and serve it.
              app.use(function (req, res, next) {
                var parsedPath = parsePath(req.originalUrl);
                if (parsedPath.extname === `` || parsedPath.extname === `.html`) {
                  if (htmlStr) {
                    return res.send(htmlStr);
                  } else {
                    try {
                      var apiRunner = require(`${directory}/.cache/api-runner-ssr`);

                      var headComponents = [];
                      var postBodyComponents = [];
                      var bodyProps = {};

                      var setHeadComponents = function setHeadComponents(components) {
                        headComponents = headComponents.concat(components);
                      };

                      var setPostBodyComponents = function setPostBodyComponents(components) {
                        postBodyComponents = postBodyComponents.concat(components);
                      };

                      var setBodyProps = function setBodyProps(props) {
                        bodyProps = _.merge({}, bodyProps, props);
                      };
                      apiRunner(`onRenderBody`, {
                        setHeadComponents,
                        setPostBodyComponents,
                        setBodyProps
                      });

                      var htmlElement = React.createElement(HTML, (0, _extends3.default)({}, bodyProps, {
                        body: ``,
                        headComponents,
                        postBodyComponents: postBodyComponents.concat([React.createElement("script", { src: "/commons.js" })])
                      }));
                      htmlStr = ReactDOMServer.renderToStaticMarkup(htmlElement);
                      htmlStr = `<!DOCTYPE html>\n${htmlStr}`;
                      return res.send(htmlStr);
                    } catch (e) {
                      console.log(e.stack);
                      throw e;
                    }
                  }
                } else {
                  return next();
                }
              });
              app.use(require(`webpack-dev-middleware`)(compiler, {
                noInfo: true,
                publicPath: devConfig.output.publicPath
              })

              // Set up API proxy.
              );var proxy = store.getState().config.proxy;

              if (proxy) {
                var prefix = proxy.prefix,
                    url = proxy.url;

                app.use(`${prefix}/*`, function (req, res) {
                  var proxiedUrl = url + req.originalUrl;
                  req.pipe(request(proxiedUrl)).pipe(res);
                });
              }

              // As last step, check if the file exists in the public folder.
              app.get(`*`, function (req, res) {
                // Load file but ignore errors.
                res.sendFile(`${process.cwd()}/public/${req.url}`, function (err) {
                  if (err) {
                    res.status(404).end();
                  }
                });
              });

              var listener = app.listen(program.port, program.host, function (e) {
                if (e) {
                  if (e.code === `EADDRINUSE`) {
                    // eslint-disable-next-line max-len
                    console.log(`Unable to start Gatsby on port ${program.port} as there's already a process listing on that port.`);
                  } else {
                    console.log(e);
                  }

                  process.exit();
                } else {
                  if (program.open) {
                    var opn = require(`opn`);
                    opn(`http://${listener.address().address}:${listener.address().port}`);
                  }
                  var host = listener.address().address === `127.0.0.1` ? `localhost` : listener.address().address;
                  console.log(`
The development server is listening at: http://${host}:${listener.address().port}
GraphiQL can be accessed at: http://${host}:${listener.address().port}/___graphql
          `);
                }
              });
            });

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function startServer(_x) {
    return _ref.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var express = require(`express`);
var graphqlHTTP = require(`express-graphql`);
var glob = require(`glob`);
var request = require(`request`);
var webpackRequire = require(`webpack-require`);
var bootstrap = require(`../bootstrap`);
var webpack = require(`webpack`);
var webpackConfig = require(`./webpack.config`);
var React = require(`react`);
var ReactDOMServer = require(`react-dom/server`);
var rl = require(`readline`);
var parsePath = require(`parse-filepath`);
var _ = require(`lodash`);

var _require = require(`../redux`),
    store = _require.store;

var copyStaticDirectory = require(`./copy-static-directory`

// Watch the static directory and copy files to public as they're added or
// changed. Wait 10 seconds so copying doesn't interfer with the regular
// bootstrap.
);setTimeout(function () {
  copyStaticDirectory();
}, 10000);

var rlInterface = rl.createInterface({
  input: process.stdin,
  output: process.stdout
});

var debug = require(`debug`)(`gatsby:application`);

module.exports = function (program) {
  var detect = require(`detect-port`);
  var port = typeof program.port === `string` ? parseInt(program.port, 10) : program.port;

  detect(port, function (err, _port) {
    if (err) {
      console.error(err);
      process.exit();
    }

    if (port !== _port) {
      // eslint-disable-next-line max-len
      var question = `Something is already running at port ${port} \nWould you like to run the app at another port instead? [Y/n] `;

      return rlInterface.question(question, function (answer) {
        if (answer.length === 0 || answer.match(/^yes|y$/i)) {
          program.port = _port; // eslint-disable-line no-param-reassign
          console.log(`changed the port`);
        }

        return startServer(program);
      });
    }

    return startServer(program);
  });
};
//# sourceMappingURL=develop.js.map