{"version":3,"sources":["../../src/utils/develop.js"],"names":["program","directory","bootstrap","webpackConfig","port","compilerConfig","devConfig","resolve","compiler","webpack","HTMLPath","glob","sync","htmlCompilerConfig","webpackRequire","error","factory","console","log","forEach","e","process","exit","HTML","debug","app","express","use","require","path","heartbeat","graphqlHTTP","schema","store","getState","graphiql","htmlStr","req","res","next","parsedPath","parsePath","originalUrl","extname","send","apiRunner","headComponents","postBodyComponents","bodyProps","setHeadComponents","concat","components","setPostBodyComponents","setBodyProps","_","merge","props","htmlElement","React","createElement","body","ReactDOMServer","renderToStaticMarkup","stack","noInfo","publicPath","output","proxy","config","prefix","url","proxiedUrl","pipe","request","get","sendFile","cwd","err","status","end","listener","listen","host","code","open","opn","address","startServer","rl","copyStaticDirectory","setTimeout","rlInterface","createInterface","input","stdin","stdout","module","exports","detect","parseInt","_port","question","answer","length","match"],"mappings":"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","file":"develop.js","sourcesContent":["/* @flow */\nconst express = require(`express`)\nconst graphqlHTTP = require(`express-graphql`)\nconst glob = require(`glob`)\nconst request = require(`request`)\nconst webpackRequire = require(`webpack-require`)\nconst bootstrap = require(`../bootstrap`)\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`./webpack.config`)\nconst React = require(`react`)\nconst ReactDOMServer = require(`react-dom/server`)\nconst rl = require(`readline`)\nconst parsePath = require(`parse-filepath`)\nconst _ = require(`lodash`)\nconst { store } = require(`../redux`)\nconst copyStaticDirectory = require(`./copy-static-directory`)\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfer with the regular\n// bootstrap.\nsetTimeout(() => {\n  copyStaticDirectory()\n}, 10000)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\nconst debug = require(`debug`)(`gatsby:application`)\n\nasync function startServer(program) {\n  const directory = program.directory\n\n  // Start bootstrap process.\n  await bootstrap(program)\n\n  const compilerConfig = await webpackConfig(\n    program,\n    directory,\n    `develop`,\n    program.port\n  )\n\n  const devConfig = compilerConfig.resolve()\n  const compiler = webpack(devConfig)\n\n  let HTMLPath = glob.sync(`${directory}/src/html.*`)[0]\n  // Check if we can't find an html component in root of site.\n  if (!HTMLPath) {\n    HTMLPath = `${directory}/.cache/default-html.js`\n  }\n\n  // We use the program port not the webpack-dev-server port as if you import\n  // files in your html.js they won't be available through the\n  // webpack-dev-server.  By using the program port, requesting these\n  // imported files might accidentally work as the imported files will be\n  // available in /public. TODO test how expensive it'd be to do an actual\n  // static compile of the html.js on startup to avoid this discprenecy\n  // between dev and prod.\n  const htmlCompilerConfig = await webpackConfig(\n    program,\n    directory,\n    `develop-html`,\n    program.port\n  )\n\n  webpackRequire(htmlCompilerConfig.resolve(), HTMLPath, (error, factory) => {\n    if (error) {\n      console.log(`Failed to require ${directory}/html.js`)\n      error.forEach(e => {\n        console.log(e)\n      })\n      process.exit()\n    }\n    const HTML = factory()\n    debug(`Configuring develop server`)\n\n    const app = express()\n    app.use(\n      require(`webpack-hot-middleware`)(compiler, {\n        log: console.log,\n        path: `/__webpack_hmr`,\n        heartbeat: 10 * 1000,\n      })\n    )\n    app.use(\n      `/___graphql`,\n      graphqlHTTP({\n        schema: store.getState().schema,\n        graphiql: true,\n      })\n    )\n    let htmlStr\n    // Render an HTML page and serve it.\n    app.use((req, res, next) => {\n      const parsedPath = parsePath(req.originalUrl)\n      if (parsedPath.extname === `` || parsedPath.extname === `.html`) {\n        if (htmlStr) {\n          return res.send(htmlStr)\n        } else {\n          try {\n            const apiRunner = require(`${directory}/.cache/api-runner-ssr`)\n\n            let headComponents = []\n            let postBodyComponents = []\n            let bodyProps = {}\n\n            const setHeadComponents = components => {\n              headComponents = headComponents.concat(components)\n            }\n\n            const setPostBodyComponents = components => {\n              postBodyComponents = postBodyComponents.concat(components)\n            }\n\n            const setBodyProps = props => {\n              bodyProps = _.merge({}, bodyProps, props)\n            }\n            apiRunner(`onRenderBody`, {\n              setHeadComponents,\n              setPostBodyComponents,\n              setBodyProps,\n            })\n\n            const htmlElement = React.createElement(HTML, {\n              ...bodyProps,\n              body: ``,\n              headComponents,\n              postBodyComponents: postBodyComponents.concat([\n                <script src=\"/commons.js\" />,\n              ]),\n            })\n            htmlStr = ReactDOMServer.renderToStaticMarkup(htmlElement)\n            htmlStr = `<!DOCTYPE html>\\n${htmlStr}`\n            return res.send(htmlStr)\n          } catch (e) {\n            console.log(e.stack)\n            throw e\n          }\n        }\n      } else {\n        return next()\n      }\n    })\n    app.use(\n      require(`webpack-dev-middleware`)(compiler, {\n        noInfo: true,\n        publicPath: devConfig.output.publicPath,\n      })\n    )\n\n    // Set up API proxy.\n    const { proxy } = store.getState().config\n    if (proxy) {\n      const { prefix, url } = proxy\n      app.use(`${prefix}/*`, (req, res) => {\n        const proxiedUrl = url + req.originalUrl\n        req.pipe(request(proxiedUrl)).pipe(res)\n      })\n    }\n\n    // As last step, check if the file exists in the public folder.\n    app.get(`*`, (req, res) => {\n      // Load file but ignore errors.\n      res.sendFile(`${process.cwd()}/public/${req.url}`, err => {\n        if (err) {\n          res.status(404).end()\n        }\n      })\n    })\n\n    const listener = app.listen(program.port, program.host, e => {\n      if (e) {\n        if (e.code === `EADDRINUSE`) {\n          // eslint-disable-next-line max-len\n          console.log(\n            `Unable to start Gatsby on port ${program.port} as there's already a process listing on that port.`\n          )\n        } else {\n          console.log(e)\n        }\n\n        process.exit()\n      } else {\n        if (program.open) {\n          const opn = require(`opn`)\n          opn(`http://${listener.address().address}:${listener.address().port}`)\n        }\n        const host = listener.address().address === `127.0.0.1`\n          ? `localhost`\n          : listener.address().address\n        console.log(\n          `\nThe development server is listening at: http://${host}:${listener.address()\n            .port}\nGraphiQL can be accessed at: http://${host}:${listener.address()\n            .port}/___graphql\n          `\n        )\n      }\n    })\n  })\n}\n\nmodule.exports = (program: any) => {\n  const detect = require(`detect-port`)\n  const port = typeof program.port === `string`\n    ? parseInt(program.port, 10)\n    : program.port\n\n  detect(port, (err, _port) => {\n    if (err) {\n      console.error(err)\n      process.exit()\n    }\n\n    if (port !== _port) {\n      // eslint-disable-next-line max-len\n      const question = `Something is already running at port ${port} \\nWould you like to run the app at another port instead? [Y/n] `\n\n      return rlInterface.question(question, answer => {\n        if (answer.length === 0 || answer.match(/^yes|y$/i)) {\n          program.port = _port // eslint-disable-line no-param-reassign\n          console.log(`changed the port`)\n        }\n\n        return startServer(program)\n      })\n    }\n\n    return startServer(program)\n  })\n}\n"]}