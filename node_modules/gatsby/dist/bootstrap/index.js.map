{"version":3,"sources":["../../src/bootstrap/index.js"],"names":["Promise","require","glob","_","slash","fs","md5File","crypto","apiRunnerNode","graphql","store","emitter","boundActionCreators","loadPlugins","initCache","extractQueries","runQueries","writePages","QueryRunner","preferDefault","m","default","module","exports","program","console","log","process","uptime","directory","dispatch","type","payload","watch","time","config","e","timeEnd","flattenedPlugins","pluginVersions","map","p","version","all","resolve","catch","hashes","pluginsHash","createHash","update","concat","digest","state","getState","oldPluginsHash","status","PLUGINS_HASH","remove","error","message","mkdirs","srcDir","__dirname","siteDir","copy","clobber","exit","hasAPIFile","env","plugin","sync","ssrPlugins","filter","options","pluginOptions","browserPlugins","browserAPIRunner","readFileSync","err","browserPluginsRequires","join","sSRAPIRunner","ssrPluginsRequires","writeFileSync","extensions","traceId","apiResults","flattenDeep","graphqlRunner","query","context","schema","waitForCascadingActions","exists404html","some","pages","path","forEach","page","createPage","checkJobsDone","debounce","jobs","active","length","on"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\nconst Promise = require(`bluebird`)\nconst glob = require(`glob`)\nconst _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs-extra`)\nconst md5File = require(`md5-file/promise`)\nconst crypto = require(`crypto`)\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { graphql } = require(`graphql`)\nconst { store, emitter } = require(`../redux`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst loadPlugins = require(`./load-plugins`)\nconst { initCache } = require(`../utils/cache`)\n\nconst {\n  extractQueries,\n} = require(`../internal-plugins/query-runner/query-watcher`)\nconst {\n  runQueries,\n} = require(`../internal-plugins/query-runner/page-query-runner`)\nconst { writePages } = require(`../internal-plugins/query-runner/pages-writer`)\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`./log-line-function`)\n\n// Start off the query running.\nconst QueryRunner = require(`../internal-plugins/query-runner`)\n\nconst preferDefault = m => (m && m.default) || m\n\nmodule.exports = async (program: any) => {\n  console.log(\n    `lib/bootstrap/index.js time since started:`,\n    process.uptime(),\n    `sec`\n  )\n\n  // Fix program directory path for windows env\n  program.directory = slash(program.directory)\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  QueryRunner.watch(program.directory)\n\n  // Try opening the site's gatsby-config.js file.\n  console.time(`open and validate gatsby-config.js`)\n  let config\n  try {\n    // $FlowFixMe\n    config = preferDefault(require(`${program.directory}/gatsby-config`))\n  } catch (e) {\n    // Ignore. Having a config isn't required.\n  }\n\n  store.dispatch({\n    type: `SET_SITE_CONFIG`,\n    payload: config,\n  })\n\n  console.timeEnd(`open and validate gatsby-config.js`)\n\n  const flattenedPlugins = await loadPlugins(config)\n\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const hashes = await Promise.all([\n    md5File(`package.json`),\n    Promise.resolve(md5File(`gatsby-config.js`).catch(() => {})), // ignore as this file isn't required),\n    Promise.resolve(md5File(`gatsby-node.js`).catch(() => {})), // ignore as this file isn't required),\n  ])\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n  let state = store.getState()\n  const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    console.log(\n      `\nOne or more of your plugins have changed since the last time you ran Gatsby. As\na precaution, we're deleting your site's cache to ensure there's not any stale\ndata\n`\n    )\n  }\n\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash) {\n    try {\n      await fs.remove(`${program.directory}/.cache`)\n    } catch (e) {\n      console.error(`Failed to remove .cache files. ${e.message}`)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  initCache()\n\n  // Ensure the public directory is created.\n  await fs.mkdirs(`${program.directory}/public`)\n\n  // Copy our site files to the root of the site.\n  console.time(`copy gatsby files`)\n  const srcDir = `${__dirname}/../cache-dir`\n  const siteDir = `${program.directory}/.cache`\n  try {\n    await fs.copy(srcDir, siteDir, { clobber: true })\n    await fs.mkdirs(`${program.directory}/.cache/json`)\n  } catch (e) {\n    console.log(`Unable to copy site files to .cache`)\n    console.log(e)\n    process.exit(1)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin) =>\n    // TODO make this async...\n    glob.sync(`${plugin.resolve}/gatsby-${env}*`)[0]\n\n  const ssrPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n  const browserPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n\n  let browserAPIRunner = ``\n\n  try {\n    browserAPIRunner = fs.readFileSync(\n      `${siteDir}/api-runner-browser.js`,\n      `utf-8`\n    )\n  } catch (err) {\n    console.error(`Failed to read ${siteDir}/api-runner-browser.js`)\n  }\n\n  const browserPluginsRequires = browserPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n\n  browserAPIRunner = `var plugins = [${browserPluginsRequires}]\\n${browserAPIRunner}`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    console.error(`Failed to read ${siteDir}/api-runner-ssr.js`)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  console.timeEnd(`copy gatsby files`)\n\n  // Source nodes\n  console.time(`initial sourcing and transforming nodes`)\n  await require(`../utils/source-nodes`)()\n  console.timeEnd(`initial sourcing and transforming nodes`)\n\n  // Create Schema.\n  console.time(`building schema`)\n  await require(`../schema`)()\n  console.timeEnd(`building schema`)\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.js`, `.jsx`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const graphqlRunner = (query, context = {}) => {\n    const schema = store.getState().schema\n    return graphql(schema, query, context, context, context)\n  }\n\n  // Collect pages.\n  console.time(`createPages`)\n  await apiRunnerNode(`createPages`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPages`,\n    waitForCascadingActions: true,\n  })\n  console.timeEnd(`createPages`)\n\n  // A variant on createPages for plugins that want to\n  // have full control over adding/removing pages. The normal\n  // \"createPages\" API is called every time (during development)\n  // that data changes.\n  console.time(`createPagesStatefully`)\n  await apiRunnerNode(`createPagesStatefully`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPagesStatefully`,\n    waitForCascadingActions: true,\n  })\n  console.timeEnd(`createPagesStatefully`)\n\n  // Copy /404/ to /404.html as many static site hosts expect\n  // site 404 pages to be named this.\n  // https://www.gatsbyjs.org/docs/add-404-page/\n  const exists404html = _.some(\n    store.getState().pages,\n    p => p.path === `/404.html`\n  )\n  if (!exists404html) {\n    store.getState().pages.forEach(page => {\n      if (page.path === `/404/`) {\n        boundActionCreators.createPage({\n          ...page,\n          path: `/404.html`,\n        })\n      }\n    })\n  }\n\n  // Extract queries\n  console.time(`extract queries`)\n  await extractQueries()\n  console.timeEnd(`extract queries`)\n\n  // Run queries\n  console.time(`Run queries`)\n  await runQueries()\n  console.timeEnd(`Run queries`)\n\n  // Write out files.\n  console.time(`write out pages modules`)\n  await writePages()\n  console.timeEnd(`write out pages modules`)\n\n  const checkJobsDone = _.debounce(resolve => {\n    const state = store.getState()\n    if (state.jobs.active.length === 0) {\n      console.log(\n        `bootstrap finished, time since started: ${process.uptime()}sec`\n      )\n      resolve({ graphqlRunner })\n    }\n  }, 100)\n\n  if (store.getState().jobs.active.length === 0) {\n    console.log(\n      `bootstrap finished, time since started: ${process.uptime()}sec`\n    )\n    return { graphqlRunner }\n  } else {\n    return new Promise(resolve => {\n      // Wait until all side effect jobs are finished.\n      emitter.on(`END_JOB`, () => checkJobsDone(resolve))\n    })\n  }\n}\n"]}