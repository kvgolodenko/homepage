{"version":3,"sources":["../../src/schema/run-sift.js"],"names":["sift","require","_","connectionFromArray","store","createPageDependency","module","exports","args","nodes","connection","path","clonedArgs","JSON","parse","siftifyArgs","newObject","each","object","v","k","isObject","isArray","exploded","split","regex","RegExp","Minimatch","mm","makeRe","siftArgs","filter","includes","push","result","isEmpty","$and","length","sort","convertedFields","fields","map","field","replace","orderBy","order","connectionArray","totalCount","internal","type","nodeId","id"],"mappings":"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","file":"run-sift.js","sourcesContent":["// @flow\nconst sift = require(`sift`)\nconst _ = require(`lodash`)\nconst { connectionFromArray } = require(`graphql-skip-limit`)\nconst { store } = require(`../redux/`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\n\ntype Node = {\n  id: String,\n  type: String,\n}\n\nmodule.exports = ({ args, nodes, connection = false, path = `` }) => {\n  // Clone args as for some reason graphql-js removes the constructor\n  // from nested objects which breaks a check in sift.js.\n  const clonedArgs = JSON.parse(JSON.stringify(args))\n\n  const siftifyArgs = object => {\n    const newObject = {}\n    _.each(object, (v, k) => {\n      if (_.isObject(v) && !_.isArray(v)) {\n        newObject[k] = siftifyArgs(v)\n      } else {\n        // Compile regex first.\n        if (k === `regex`) {\n          const exploded = v.split(`/`)\n          const regex = new RegExp(exploded[1], exploded[2])\n          newObject[`$regex`] = regex\n        } else if (k === `glob`) {\n          const Minimatch = require(`minimatch`).Minimatch\n          const mm = new Minimatch(v)\n          newObject[`$regex`] = mm.makeRe()\n        } else {\n          newObject[`$${k}`] = v\n        }\n      }\n    })\n    return newObject\n  }\n\n  const siftArgs = []\n  if (clonedArgs.filter) {\n    _.each(clonedArgs.filter, (v, k) => {\n      // Ignore connection and sorting args\n      if (_.includes([`skip`, `limit`, `sort`], k)) return\n\n      siftArgs.push(siftifyArgs({ [k]: v }))\n    })\n  }\n\n  let result = _.isEmpty(siftArgs) ? nodes : sift({ $and: siftArgs }, nodes)\n\n  if (!result || !result.length) return\n\n  // Sort results.\n  if (clonedArgs.sort) {\n    const convertedFields = clonedArgs.sort.fields.map(field =>\n      field.replace(/___/g, `.`)\n    )\n\n    result = _.orderBy(result, convertedFields, clonedArgs.sort.order)\n  }\n\n  if (connection) {\n    const connectionArray = connectionFromArray(result, args)\n    connectionArray.totalCount = result.length\n    if (result.length > 0 && result[0].internal) {\n      createPageDependency({\n        path,\n        connection: result[0].internal.type,\n      })\n    }\n    return connectionArray\n  }\n\n  createPageDependency({\n    path,\n    nodeId: result[0].id,\n  })\n  return result[0]\n}\n"]}