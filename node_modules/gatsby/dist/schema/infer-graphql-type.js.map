{"version":3,"sources":["../../src/schema/infer-graphql-type.js"],"names":["inferObjectStructureFromNodes","require","GraphQLObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLList","_","invariant","moment","mime","isRelative","isRelativeUrl","normalize","systemPath","oneLine","store","getNode","getNodes","joinPath","createPageDependency","createTypeName","createKey","extractFieldExamples","isEmptyObjectOrArray","ISO_8601_FORMAT","inferGraphQLType","exampleValue","selector","otherArgs","fieldName","split","pop","Array","isArray","headType","isObject","name","fields","inferredType","type","momentDate","utc","isValid","args","formatString","fromNow","description","difference","resolve","object","date","format","diff","isInteger","inferFromMapping","value","mapping","fieldSelector","types","matchedTypes","filter","isEmpty","console","log","findNode","fieldValue","path","linkedType","linkedNode","find","n","internal","id","nodeId","nodeObjectType","node","a","b","map","findLinkedNode","linkedField","inferFromFieldName","key","field","result","findRootNode","rootNode","whileCount","parent","undefined","shouldInferFile","nodes","get","looksLikeFile","isString","lookup","pathToOtherNode","dir","otherFileExists","some","absolutePath","inferFromUri","fileField","parentFileNode","fileLinkPath","linkedFileNode","EXCLUDE_KEYS","children","config","getState","isRoot","inferredFields","each","nextSelector","inferredField","includes"],"mappings":"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","file":"infer-graphql-type.js","sourcesContent":["// @flow\nconst {\n  GraphQLObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n} = require(`graphql`)\nconst _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst moment = require(`moment`)\nconst mime = require(`mime`)\nconst isRelative = require(`is-relative`)\nconst isRelativeUrl = require(`is-relative-url`)\nconst normalize = require(`normalize-path`)\nconst systemPath = require(`path`)\nconst { oneLine } = require(`common-tags`)\n\nconst { store, getNode, getNodes } = require(`../redux`)\nconst { joinPath } = require(`../utils/path`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\nconst {\n  extractFieldExamples,\n  isEmptyObjectOrArray,\n} = require(`./data-tree-utils`)\n\nimport type { GraphQLOutputType } from \"graphql\"\nimport type {\n  GraphQLFieldConfig,\n  GraphQLFieldConfigMap,\n} from \"graphql/type/definition\"\n\nexport type ProcessedNodeType = {\n  name: string,\n  nodes: any[],\n  node: GraphQLFieldConfig<*, *>,\n  fieldsFromPlugins: any,\n  nodeObjectType: GraphQLOutputType,\n}\n\nconst ISO_8601_FORMAT = [\n  `YYYY`,\n  `YYYY-MM`,\n  `YYYY-MM-DD`,\n  `YYYYMMDD`,\n  `YYYY-MM-DDTHHZ`,\n  `YYYY-MM-DDTHH:mmZ`,\n  `YYYY-MM-DDTHHmmZ`,\n  `YYYY-MM-DDTHH:mm:ssZ`,\n  `YYYY-MM-DDTHHmmssZ`,\n  `YYYY-MM-DDTHH:mm:ss.SSSZ`,\n  `YYYY-MM-DDTHHmmss.SSSZ`,\n  `YYYY-[W]WW`,\n  `YYYY[W]WW`,\n  `YYYY-[W]WW-E`,\n  `YYYY[W]WWE`,\n  `YYYY-DDDD`,\n  `YYYYDDDD`,\n]\n\nfunction inferGraphQLType({\n  exampleValue,\n  selector,\n  ...otherArgs\n}): ?GraphQLFieldConfig<*, *> {\n  if (exampleValue == null || isEmptyObjectOrArray(exampleValue)) return\n  let fieldName = selector.split(`.`).pop()\n\n  if (Array.isArray(exampleValue)) {\n    exampleValue = exampleValue[0]\n\n    if (exampleValue == null) return\n\n    let headType\n    // If the array contains objects, than treat them as \"nodes\"\n    // and create an object type.\n    if (_.isObject(exampleValue)) {\n      headType = new GraphQLObjectType({\n        name: createTypeName(fieldName),\n        fields: inferObjectStructureFromNodes({\n          ...otherArgs,\n          exampleValue,\n          selector,\n        }),\n      })\n      // Else if the values are simple values, just infer their type.\n    } else {\n      let inferredType = inferGraphQLType({\n        ...otherArgs,\n        exampleValue,\n        selector,\n      })\n      invariant(\n        inferredType,\n        `Could not infer graphQL type for value: ${exampleValue}`\n      )\n\n      headType = inferredType.type\n    }\n    return { type: new GraphQLList(headType) }\n  }\n\n  // Check if this is a date.\n  // All the allowed ISO 8601 date-time formats used.\n  const momentDate = moment.utc(exampleValue, ISO_8601_FORMAT, true)\n  if (momentDate.isValid()) {\n    return {\n      type: GraphQLString,\n      args: {\n        formatString: {\n          type: GraphQLString,\n        },\n        fromNow: {\n          type: GraphQLBoolean,\n          description: oneLine`\n            Returns a string generated with Moment.js' fromNow function`,\n        },\n        difference: {\n          type: GraphQLString,\n          description: oneLine`\n            Returns the difference between this date and the current time.\n            Defaults to miliseconds but you can also pass in as the\n            measurement years, months, weeks, days, hours, minutes,\n            and seconds.`,\n        },\n      },\n      resolve(object, { fromNow, difference, formatString }) {\n        const date = object[fieldName]\n        if (formatString) {\n          return moment.utc(date, ISO_8601_FORMAT, true).format(formatString)\n        } else if (fromNow) {\n          return moment.utc(date, ISO_8601_FORMAT, true).fromNow()\n        } else if (difference) {\n          return moment().diff(\n            moment.utc(date, ISO_8601_FORMAT, true),\n            difference\n          )\n        } else {\n          return date\n        }\n      },\n    }\n  }\n\n  switch (typeof exampleValue) {\n    case `boolean`:\n      return { type: GraphQLBoolean }\n    case `string`:\n      return { type: GraphQLString }\n    case `object`:\n      return {\n        type: new GraphQLObjectType({\n          name: createTypeName(fieldName),\n          fields: inferObjectStructureFromNodes({\n            ...otherArgs,\n            exampleValue,\n            selector,\n          }),\n        }),\n      }\n    case `number`:\n      return _.isInteger(exampleValue)\n        ? { type: GraphQLInt }\n        : { type: GraphQLFloat }\n    default:\n      return null\n  }\n}\n\nfunction inferFromMapping(\n  value,\n  mapping,\n  fieldSelector,\n  types\n): ?GraphQLFieldConfig<*, *> {\n  const matchedTypes = types.filter(\n    type => type.name === mapping[fieldSelector]\n  )\n  if (_.isEmpty(matchedTypes)) {\n    console.log(`Couldn't find a matching node type for \"${fieldSelector}\"`)\n    return\n  }\n\n  const findNode = (fieldValue, path) => {\n    const linkedType = mapping[fieldSelector]\n    const linkedNode = _.find(\n      getNodes(),\n      n => n.internal.type === linkedType && n.id === fieldValue\n    )\n    if (linkedNode) {\n      createPageDependency({ path, nodeId: linkedNode.id })\n      return linkedNode\n    }\n  }\n\n  if (_.isArray(value)) {\n    return {\n      type: new GraphQLList(matchedTypes[0].nodeObjectType),\n      resolve: (node, a, b, { fieldName }) => {\n        const fieldValue = node[fieldName]\n\n        if (fieldValue) {\n          return fieldValue.map(value => findNode(value, b.path))\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  return {\n    type: matchedTypes[0].nodeObjectType,\n    resolve: (node, a, b, { fieldName }) => {\n      const fieldValue = node[fieldName]\n\n      if (fieldValue) {\n        return findNode(fieldValue, b.path)\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nfunction findLinkedNode(value, linkedField, path) {\n  let linkedNode\n  // If the field doesn't link to the id, use that for searching.\n  if (linkedField) {\n    linkedNode = getNodes().find(n => n[linkedField] === value)\n    // Else the field is linking to the node's id, the default.\n  } else {\n    linkedNode = getNode(value)\n  }\n\n  if (linkedNode) {\n    if (path) {\n      createPageDependency({ path, nodeId: linkedNode.id })\n    }\n    return linkedNode\n  }\n}\n\nfunction inferFromFieldName(value, selector, types): GraphQLFieldConfig<*, *> {\n  let isArray = false\n  if (_.isArray(value)) {\n    value = value[0]\n    isArray = true\n  }\n  const key = selector.split(`.`).pop()\n  const [, , linkedField] = key.split(`___`)\n\n  const linkedNode = findLinkedNode(value, linkedField)\n  invariant(\n    linkedNode,\n    oneLine`\n      Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n      There is no corresponding node with the ${linkedField || `id`}\n      field matching: \"${value}\"\n    `\n  )\n  const field = types.find(type => type.name === linkedNode.internal.type)\n\n  invariant(\n    field,\n    oneLine`\n      Encountered an error trying to infer a GraphQL type for: \"${selector}\".\n      There is no corresponding GraphQL type \"${linkedNode.internal\n        .type}\" available\n      to link to this node.\n    `\n  )\n\n  if (isArray) {\n    return {\n      type: new GraphQLList(field.nodeObjectType),\n      resolve: (node, a, b = {}) => {\n        let fieldValue = node[key]\n        if (fieldValue) {\n          return fieldValue.map(value =>\n            findLinkedNode(value, linkedField, b.path)\n          )\n        } else {\n          return null\n        }\n      },\n    }\n  }\n\n  return {\n    type: field.nodeObjectType,\n    resolve: (node, a, b = {}) => {\n      let fieldValue = node[key]\n      if (fieldValue) {\n        const result = findLinkedNode(fieldValue, linkedField, b.path)\n        return result\n      } else {\n        return null\n      }\n    },\n  }\n}\n\nfunction findRootNode(node) {\n  // Find the root node.\n  let rootNode = node\n  let whileCount = 0\n  while (\n    rootNode.parent &&\n    getNode(rootNode.parent) !== undefined &&\n    whileCount < 101\n  ) {\n    rootNode = getNode(rootNode.parent)\n    whileCount += 1\n    if (whileCount > 100) {\n      console.log(\n        `It looks like you have a node that's set its parent as itself`,\n        rootNode\n      )\n    }\n  }\n\n  return rootNode\n}\n\nfunction shouldInferFile(nodes, key, value) {\n  // Find the node used for this example.\n  const node = nodes.find(n => _.get(n, key) === value)\n\n  if (!node) {\n    return false\n  }\n\n  const looksLikeFile =\n    _.isString(value) &&\n    mime.lookup(value) !== `application/octet-stream` &&\n    // domains ending with .com\n    mime.lookup(value) !== `application/x-msdownload` &&\n    isRelative(value) &&\n    isRelativeUrl(value)\n\n  if (!looksLikeFile) {\n    return false\n  }\n\n  const rootNode = findRootNode(node)\n\n  // Only nodes transformed (ultimately) from a File\n  // can link to another File.\n  if (rootNode.internal.type !== `File`) {\n    return false\n  }\n\n  const pathToOtherNode = normalize(joinPath(rootNode.dir, value))\n  const otherFileExists = getNodes().some(\n    n => n.absolutePath === pathToOtherNode\n  )\n  return otherFileExists\n}\n\n// Look for fields that are pointing at a file — if the field has a known\n// extension then assume it should be a file field.\nfunction inferFromUri(key, types) {\n  const fileField = types.find(type => type.name === `File`)\n\n  if (!fileField) return\n\n  return {\n    type: fileField.nodeObjectType,\n    resolve: (node, a, { path }) => {\n      const fieldValue = node[key]\n\n      if (!fieldValue) {\n        return null\n      }\n\n      // Find File node for this node (we assume the node is something\n      // like markdown which would be a child node of a File node).\n      const parentFileNode = findRootNode(node)\n\n      // Use the parent File node to create the absolute path to\n      // the linked file.\n      const fileLinkPath = normalize(\n        systemPath.resolve(parentFileNode.dir, fieldValue)\n      )\n\n      // Use that path to find the linked File node.\n      const linkedFileNode = _.find(\n        getNodes(),\n        n => n.internal.type === `File` && n.absolutePath === fileLinkPath\n      )\n\n      if (linkedFileNode) {\n        createPageDependency({\n          path,\n          nodeId: linkedFileNode.id,\n        })\n        return linkedFileNode\n      } else {\n        return null\n      }\n    },\n  }\n}\n\ntype inferTypeOptions = {\n  nodes: Object[],\n  types: ProcessedNodeType[],\n  selector?: string,\n  exampleValue?: Object,\n}\n\nconst EXCLUDE_KEYS = {\n  id: 1,\n  parent: 1,\n  children: 1,\n}\n\n// Call this for the top level node + recursively for each sub-object.\n// E.g. This gets called for Markdown and then for its frontmatter subobject.\nexport function inferObjectStructureFromNodes({\n  nodes,\n  types,\n  selector,\n  exampleValue = extractFieldExamples(nodes),\n}: inferTypeOptions): GraphQLFieldConfigMap<*, *> {\n  const config = store.getState().config\n  const isRoot = !selector\n  const mapping = config && config.mapping\n\n  // Ensure nodes have internal key with object.\n  nodes = nodes.map(n => (n.internal ? n : { ...n, internal: {} }))\n\n  const inferredFields = {}\n  _.each(exampleValue, (value, key) => {\n    // Remove fields common to the top-level of all nodes.  We add these\n    // elsewhere so don't need to infer their type.\n    if (isRoot && EXCLUDE_KEYS[key]) return\n\n    // Several checks to see if a field is pointing to custom type\n    // before we try automatic inference.\n    const nextSelector = selector ? `${selector}.${key}` : key\n    const fieldSelector = `${nodes[0].internal.type}.${nextSelector}`\n\n    let fieldName = key\n    let inferredField\n\n    // First check for manual field => type mappings in the site's\n    // gatsby-config.js\n    if (mapping && _.includes(Object.keys(mapping), fieldSelector)) {\n      inferredField = inferFromMapping(value, mapping, fieldSelector, types)\n\n      // Second if the field has a suffix of ___node. We use then the value\n      // (a node id) to find the node and use that node's type as the field\n    } else if (_.includes(key, `___NODE`)) {\n      ;[fieldName] = key.split(`___`)\n      inferredField = inferFromFieldName(value, nextSelector, types)\n\n      // Third if the field is pointing to a file (from another file).\n    } else if (\n      nodes[0].internal.type !== `File` &&\n      shouldInferFile(nodes, nextSelector, value)\n    ) {\n      inferredField = inferFromUri(key, types)\n\n      // Finally our automatic inference of field value type.\n    } else {\n      inferredField = inferGraphQLType({\n        nodes,\n        types,\n        exampleValue: value,\n        selector: selector ? `${selector}.${key}` : key,\n      })\n    }\n\n    if (!inferredField) return\n\n    // Replace unsupported values\n    inferredFields[createKey(fieldName)] = inferredField\n  })\n\n  return inferredFields\n}\n"]}