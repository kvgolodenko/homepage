{"version":3,"sources":["../../src/bin/cli.js"],"names":["program","require","packageJson","path","_","Promise","console","log","process","uptime","global","onPossiblyUnhandledRejection","error","on","stack","defaultHost","directory","resolve","version","usage","time","command","description","option","action","develop","timeEnd","p","env","NODE_ENV","build","then","exit","serve","rootPath","starter","newCommand","subCmd","argv","slice","cmds","map","commands","concat","includes","help","parse"],"mappings":"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","file":"cli.js","sourcesContent":["const program = require(`commander`)\nconst packageJson = require(`../../package.json`)\nconst path = require(`path`)\nconst _ = require(`lodash`)\nconst Promise = require(`bluebird`)\nconsole.log(`bin/cli: time since started:`, process.uptime())\n\n// Improve Promise error handling. Maybe... what's the best\n// practice for this these days?\nglobal.Promise = require(`bluebird`)\nPromise.onPossiblyUnhandledRejection(error => {\n  throw error\n})\nprocess.on(`unhandledRejection`, error => {\n  console.error(`UNHANDLED REJECTION`, error.stack)\n})\n\nconst defaultHost = `localhost`\n\nconst directory = path.resolve(`.`)\n\nprogram.version(packageJson.version).usage(`[command] [options]`)\n\nconsole.time(`time to load develop`)\nprogram\n  .command(`develop`)\n  .description(\n    `Start development server. Watches files and rebuilds and hot reloads ` +\n      `if something changes`\n  ) // eslint-disable-line max-len\n  .option(\n    `-H, --host <url>`,\n    `Set host. Defaults to ${defaultHost}`,\n    defaultHost\n  )\n  .option(`-p, --port <port>`, `Set port. Defaults to 8000`, `8000`)\n  .option(`-o, --open`, `Open the site in your browser for you.`)\n  .action(command => {\n    const develop = require(`../utils/develop`)\n    console.timeEnd(`time to load develop`)\n    const p = {\n      ...command,\n      directory,\n    }\n    develop(p)\n  })\n\nprogram\n  .command(`build`)\n  .description(`Build a Gatsby project.`)\n  .option(\n    `--prefix-paths`,\n    `Build site with link paths prefixed (set prefix in your config).`\n  )\n  .action(command => {\n    // Set NODE_ENV to 'production'\n    process.env.NODE_ENV = `production`\n\n    const build = require(`../utils/build`)\n    const p = {\n      ...command,\n      directory,\n    }\n    build(p).then(() => {\n      console.log(`Done building in`, process.uptime(), `seconds`)\n      process.exit()\n    })\n  })\n\nprogram\n  .command(`serve`)\n  .description(`Serve built site.`)\n  .option(\n    `-H, --host <url>`,\n    `Set host. Defaults to ${defaultHost}`,\n    defaultHost\n  )\n  .option(`-p, --port <port>`, `Set port. Defaults to 9000`, `9000`)\n  .option(`-o, --open`, `Open the site in your browser for you.`)\n  .action(command => {\n    const serve = require(`../utils/serve`)\n    const p = {\n      ...command,\n      directory,\n    }\n    serve(p)\n  })\n\nprogram\n  .command(`new [rootPath] [starter]`)\n  .description(`Create new Gatsby project.`)\n  .action((rootPath, starter) => {\n    const newCommand = require(`../utils/new`)\n    newCommand(rootPath, starter)\n  })\n\nprogram.on(`--help`, () => {\n  console.log(\n    `To show subcommand help:\n\n    gatsby [command] -h\n`\n  )\n})\n\n// If the user types an unknown sub-command, just display the help.\nconst subCmd = process.argv.slice(2, 3)[0]\nlet cmds = _.map(program.commands, `_name`)\ncmds = cmds.concat([`--version`, `-V`])\n\nif (!_.includes(cmds, subCmd)) {\n  program.help()\n} else {\n  program.parse(process.argv)\n}\n"]}